from flask import Flask, jsonify
from flask import send_file
from flask_cors import CORS, cross_origin
import asyncio
from backend.dependencies import register_dependencies
from backend.core.fallout_news_logic import run_bunker_sequence

app = Flask(__name__)
# Allow all origins for development purposes (consider tightening this in production)
CORS(app, resources={r"/bunker*": {"origins": "*"}})

container = register_dependencies()

@app.route("/bunker", methods=["GET"])
@cross_origin()
def bunker_route():
    try:
        result = asyncio.run(run_bunker_sequence(container))
        if isinstance(result, tuple) and len(result) == 2:
            headlines, response = result
        elif isinstance(result, dict):
            headlines = result.get("headlines", [])
            response = result.get("response", "‚õîÔ∏è No broadcast received from the bunker.")
        else:
            headlines = []
            response = "‚õîÔ∏è Unexpected response format from the bunker."

        return jsonify({
            "headlines": headlines,
            "response": response
        })

    except Exception as e:
        return jsonify({
            "headlines": [],
            "response": f"üö® Error: {str(e)}"
        }), 500


# New route for serving audio generated by Google TTS
@app.route("/bunker/audio", methods=["GET"])
@cross_origin()
def bunker_audio():
    try:
        _, response = asyncio.run(run_bunker_sequence(container))
        google_tts = container["google_tts"]
        audio_file = google_tts.generate_audio(response)
        if audio_file:
            return send_file(audio_file, mimetype="audio/mpeg")
        return "Audio generation failed", 500
    except FileNotFoundError:
        return "Audio file not found", 404

import socket


# system configurations

# This block sets the CORS port to a fixed value (5000).
def find_free_port(start=5000, end=5100):
    # Always return 5000 for CORS usage
    return 5000

import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run Flask API for Pip-Boy")
    parser.add_argument("--port", type=int, help="Port number to run the server on (default: 5000)")
    args = parser.parse_args()

    selected_port = args.port if args.port else 5000
    print(f" Starting server on port {selected_port}")
    app.run(host="0.0.0.0", port=selected_port)